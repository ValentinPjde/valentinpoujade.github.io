{
    "projects": [
        {
            "id": 1,
            "title": "Interface de supervision énergétique",
            "subtitle":"",
            "description": "Interface web pour suivre l'évolution des consommations énergétiques d'un bâtiment et automatiser des actions pour les réduire. Elle as été portée sur une plateforme distante permettant le contrôle de plusieurs sites synchronisés en une seule interface.",
            "contexte":"J’ai conceptualisé l’application web Wescan hébergée sous un serveur Apache 2 dans le terminal  permettant la supervision et l’automatisation des bâtiments. Elle a été réalisé en PHP car ce langage possède très peu de dépendances externes (dans le cas où n’avons pas accès à internet) et a été conçu pour interagir avec des bases de données rationnelles. Elle effectue des interactions avec la même base de données que le programme en C# ce qui permet de gérer et visualiser plus facilement les données.",
            "miseeoeuvre":"Comme toute application web, j’ai tout d’abord effectué les éléments principaux tels que la barre de navigation, le système de routage pour la navigation entre les pages, la connexion avec la base de données ainsi que l’authentification des utilisateurs. Dans un second temps, j’ai créé les fonctionnalités demandées dans le cahier des charges et d’autres que j’ai réalisé selon mon point de vue d’utilisation. Tels que la visualisation de plans de masses avec des zones pour visualiser les données en temps réel des terminaux IOT et les actionner à distance les équipements. J’ai également réalisé plusieurs graphiques pour la visualisation des consommations des différentes énergies relevés par les compteurs et capteurs. Enfin tous le système de configuration des terminaux (leurs adresse, port série), des plans, des utilisateurs et les fonctionnalités d’alertes et de planification pour automatiser facilement des actions en cas de dépassements de seuils ou dysfonctionnements. <img alt='Vue logo' class='card-img-top mx-auto d-block img-custome-list img-fluid' style='width:100%' src='./assets/realisations/graphique_wescan.png'>",
            "experience": "A travers ce projet j’ai pu acquérir des compétences dans divers domaines. C’est le premier projet web que je réalise en intégralité de sa conception à sa mise en production. J’ai pu apprendre à traduire les besoins exprimés par les commerciaux, les clients, l’équipe hardware et le dirigeant en fonctionnalités simple et ergonomique. J’ai aussi appris à adapter la base de donnée pour certaines de ces fonctionnalités que je n’avais pas prévu initialement. ",
            "image": "./assets/img/projects/wescan2.png",
            "category": "web"
        },
        {
            "id": 2,
            "title": "Intégration d'une oeuvre réel en numérique",
            "subtitle":"",
            "description": "Reproduction d'une oeuvre réalisée par Gérard Bakner. Le but était de récréer son oeuvre en utilisant uniquement du code HTML et CSS. Elle permet de mettre en avant son oeuvre de manière numérique.",
            "image": "./assets/img/projects/invader.png",
            "category": "web"
        },
        {
            "id": 3,
            "title": "Programme embarqué multi-protocoles",
            "subtitle":"",
            "description": "Logiciel embarqué dans un Raspberry Pi permettant l'enregistrement des mesures visualisable par l'interface de supervisions énergétiques. Il permet de récupérer les mesures en temps réel et de les enregistrer dans un système de base de données.",
            "contexte":"C’est un programme embarqué dans un contrôleur (Wespci) sous Linux permettant la gestion des données et des fonctionnalités du système d’information de supervision et de contrôle des bâtiments. Durant ces deux dernières années, j’étais en charge du développement de ce programme en ligne de commande développé en C#. L’ancienne version était un programme assez similaire mais très mal structuré et beaucoup trop complexe à reprendre. J’ai donc repris le projet à zéro avec l’aide d’un prestataire externe, nous avons effectués une simplification considérable des structures logiques du projet, et un travail de fond sur la récupération des informations venant des capteurs, pour que les données de consommations énergétiques soit gérées de manière sécurisée et durable.<img alt='Vue logo' class='card-img-top mx-auto d-block img-custome-list img-fluid' style='width:50%' src='./assets/realisations/diagram_wescan.jpg'>",
            "miseeoeuvre":"Lors de la conception, nous avons dû modéliser la structure logique du projet et essayer d’englober les diverses entités qui sont utiliser dans le système Wescan comme le paramétrage dynamique des appareils communiquant à travers divers protocoles. Nous avons commencés par l’intégration du protocole principal : Modbus car il est utilisé pour la communication avec notre carte électronique de contrôle. Après 1 mois de conception, le prestataire a finalisé sa mission, la modélisation et l’archivage des données est sécurisé et évolutif. <br>Après cette phase, j’ai pu prendre en charge le développement de ce programme en autonomie et intégrer les divers protocoles de communication d’IOT que nos clients finaux possèdent. Outre la gestion des données, ce programme possède 3 threads permettant d’effectuer des lectures et actions récurrentes. Il tourne 24h/24 dans le système, j’ai créé un service système sous Linux pour que le programme se lance à chaque démarrage de la machine ou se redémarre en cas de crash.<div align='center' class='embed-responsive embed-responsive-16by9'><video muted autoplay loop class='embed-responsive-item' style='width:80%'><source src='./assets/realisations/action.mp4' width='40%' type='video/mp4'></video></div>",
            "experience":"Grâce à ce projet, j’ai pu découvrir la conduite d’un projet logiciel des premiers tests de conception, au développement sur une longue durée (2 ans) avec énormément d’évolutions jusqu’à la mise en production chez nos nouveaux ou anciens clients (1 ans après les premiers tests de faisabilités). J’ai également pu réaliser une conception de base de données englobant toutes les entités qui entrent dans le système et les structurer dans une architecture logique et évolutive. <br>Le challenge dans ce projet est surtout le manque de ressource humaine, étant le seul développeur logiciel j’ai dû faire preuve d’organisation et de communication avec l’équipe des développeurs couches basses pour l’intégration des protocoles de communications, l’échange avec les appareils et le fonctionnement du système global. ",
            "image": "./assets/img/projects/iot.jpg",
            "category": "software"
        },
        {
            "id": 4,
            "title": "Conception d'une architecture de base de données",
            "subtitle":"",
            "description": "Conception d'une architecture répondant aux besoins de l'application de supervision énergétique. Elle permet de stocker les mesures et de les afficher dans un tableau de bord. Elle permet aussi de gérer les utilisateurs et les accès aux données.",
            "contexte":"C’est une base de données (BDD) hébergé dans un serveur MySQL dans le terminal permettant de stocker les paramétrages et les consommations des bâtiments. Cette BDD est le cœur de l’infrastructure de ce contrôleur. Elle interagit entre le back end en C# et le front end en PHP de Wescan. La modélisation de cette BDD a été conceptualisé en mapping objet-relationnel (ORM), qui pour faire simple transforme la couche objets (les classes du programme en C#) en couche relationnel qui correspondent au tables de cette BDD. Cependant les classes du back end répondent seulement au besoin technique de stockage des mesures et paramétrage des équipements. J’ai donc dû adapter en rajoutant de nombreuses tables pour enregistrer les fonctionnalités destinées aux utilisateurs. <img alt='Vue logo' class='card-img-top mx-auto d-block img-custome-list img-fluid' style='width:50%' src='./assets/realisations/diagram_mcd_wescan.png'>",
            "miseeoeuvre":"La création de la base de données s’est donc généré à partir de la structure des classes du programme C#. J’ai d’abord créé un parent ObjetNommé avec les attributs Id et Nom, pour associer à toutes les classes et assurer la même structure pour les tables de la base de données. <img alt='Vue logo' class='card-img-top mx-auto d-block img-custome-list img-fluid' style='width:50%' src='./assets/realisations/objetNomme.png'>J’ai ensuite pu créer mes différentes classes enfants de ObjetNomme pour catégorisé mes différentes entités présentes dans le système. Il me suffit ensuite de créer un nouvelle objet, modifier ses attributs et de l’enregistrer en base à l’aide du système ORM.<br>Nous avons réalisé le système ORM pour effectuer les opérations CRUD (Create, Read, Update, Delete) en n’utilisant aucun framework ce qui nous permet de mieux gérer l’enregistrement et le fonctionnement du système. Nous avons réalisé ce système de façon à le rendre flexible pour le choix du moteur de BDD, c’est-à-dire que nous pouvons facilement changer de moteur sans refaire complètement le projet (ce qui est souvent le cas pour les framework).",
            "experience":"A travers ce projet j’ai pu pour la première fois réaliser une modélisation de BDD complète en effectuant la classification (ou zoologie) des entités qui sont présente dans la solution. J’ai appris à modifier la structure initiale de la base de données pour intégrer de nouvelles fonctionnalités. J’ai également dû adapter cette base de données locale pour la plateforme distante qui est une sorte de miroir de la BDD locale avec certaines informations complémentaire. J’ai aussi appris à évoluer en autonomie, après la première phase de conception, toutes les adaptions liés aux besoins des clients finaux. J’ai également dû faire preuve de pédagogie et de travailler en équipe pour l’adaptation de la BDD pour la plateforme distante avec la personne en charge de celle-ci.",
            "image": "./assets/img/projects/MCD.png",
            "category": "software"
        },
        {
            "id": 5,
            "title": "Architecture de plateformes distantes",
            "subtitle":"",
            "description": "Conception d'une architecture DevOps permettant de gérer les différentes plateformes distantes et synchroniser ses divers sites en seul endroit. Ces plateformes sont totalement indépendantes et contenerisées pour chaque clients dans un serveur.",
            "contexte":"La plateforme distante de Wescan est une infrastructure dédiée pour les clients qui le souhaite. Cela apporte plusieurs avantages : un système de backup pour les données, un accès à l’interface depuis une url dédié à chaque client et une centralisation des données de plusieurs contrôleurs (donc des sites dans des zones géographique différentes) sur une seul interface avec la possibilité de comparer les données entre plusieurs bâtiments. <img alt='Vue logo' class='card-img-top mx-auto d-block img-custome-list img-fluid' style='width:70%' src='./assets/realisations/dashboard_geo.png'>",
            "miseeoeuvre":"Cette plateforme est déployée par docker qui permet d’automatiser facilement le déploiement de nouvelle infrastructure pour nos clients. L’infrastructure est constituée de 4 services dans des containers : <ul><li>Un serveur web NGINX pour héberger l’interface web distante</li><li>Un serveur de base de données SQL</li><li>Une API sous node.js pour accéder à la base de données</li><li>Un accès PhpMyAdmin pour la gestion de la base de données</li></ul>Par manque de temps et de ressources, nous avons fait le choix de porter directement l’interface web et la base de données de l’application locale vers la plateforme distante. Ce qui nous a permis d’avoir une plateforme distante opérationnelle en quelques mois. En plus de ce portage, j’ai dû modifier mon programme embarqué pour effectuer la synchronisation des données vers la plateforme distante. Cette partie nous a demandés une longue phase de réflexion quant à la méthode de communication entre le contrôleur et le serveur distant. Ayant souvent très peu d’accès sur les réseaux où sont installés les contrôleurs, nous avons fait un sens de communication unidirectionnelle. <br>C’est-à-dire que le programme embarqué dans notre terminal est à l’origine de toutes les requêtes de synchronisation avec la plateforme distante. Nous avons donc créés un système de file d’attente pour les modifications de la plateforme distante permettant au local d’effectuer la synchronisation et de supprimer la file une fois fait.",
            "experience":"Ce projet m’as demandés énormément de réflexion pour tout le système de communication qui est beaucoup plus complexe qu’un système local. J’ai dû faire preuve d’innovation pour résoudre des problématiques capitales tant qu’au bon fonctionnement du système. C’est également le premier projet de DevOps pour une utilisation réel que je réalise. J’ai pu voir les nombreux avantages qu’il peut apporter avec l’intégration continue et l’automatisation des déploiements avec les scripts.",
            "image": "./assets/img/projects/devops.PNG",
            "category": "software"
        }
    ]
}